// <auto-generated />
using System;
using Capability.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Capability.Migrations
{
    [DbContext(typeof(CapabilityDbContext))]
    partial class CapabilityDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Capability.Entities.Chapter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<DateTimeOffset?>("DisbandedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("disbanded_date");

                    b.Property<DateTimeOffset>("FormedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("formed_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("PracticeId")
                        .HasColumnType("integer")
                        .HasColumnName("practice_id");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_chapters");

                    b.HasIndex("PracticeId")
                        .HasDatabaseName("ix_chapters_practice_id");

                    b.ToTable("chapters", (string)null);
                });

            modelBuilder.Entity("Capability.Entities.ChapterRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChapterId")
                        .HasColumnType("integer")
                        .HasColumnName("chapter_id");

                    b.Property<int>("ChapterRoleTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("chapter_role_type_id");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<DateTimeOffset?>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<int>("IndividualId")
                        .HasColumnType("integer")
                        .HasColumnName("individual_id");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_chapter_roles");

                    b.HasIndex("ChapterId")
                        .HasDatabaseName("ix_chapter_roles_chapter_id");

                    b.HasIndex("ChapterRoleTypeId")
                        .HasDatabaseName("ix_chapter_roles_chapter_role_type_id");

                    b.ToTable("chapter_roles", (string)null);
                });

            modelBuilder.Entity("Capability.Entities.ChapterRoleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_chapter_role_types");

                    b.ToTable("chapter_role_types", (string)null);
                });

            modelBuilder.Entity("Capability.Entities.Practice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<DateTimeOffset?>("DisbandedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("disbanded_date");

                    b.Property<DateTimeOffset>("FormedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("formed_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_practices");

                    b.ToTable("practices", (string)null);
                });

            modelBuilder.Entity("Capability.Entities.PracticeRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<DateTimeOffset?>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<int>("IndividualId")
                        .HasColumnType("integer")
                        .HasColumnName("individual_id");

                    b.Property<int>("PracticeId")
                        .HasColumnType("integer")
                        .HasColumnName("practice_id");

                    b.Property<int>("PracticeRoleTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("practice_role_type_id");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_practice_roles");

                    b.HasIndex("PracticeId")
                        .HasDatabaseName("ix_practice_roles_practice_id");

                    b.HasIndex("PracticeRoleTypeId")
                        .HasDatabaseName("ix_practice_roles_practice_role_type_id");

                    b.ToTable("practice_roles", (string)null);
                });

            modelBuilder.Entity("Capability.Entities.PracticeRoleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_practice_role_types");

                    b.ToTable("practice_role_types", (string)null);
                });

            modelBuilder.Entity("Capability.Entities.Chapter", b =>
                {
                    b.HasOne("Capability.Entities.Practice", "Practice")
                        .WithMany("Chapters")
                        .HasForeignKey("PracticeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_chapters_practices_practice_id");

                    b.Navigation("Practice");
                });

            modelBuilder.Entity("Capability.Entities.ChapterRole", b =>
                {
                    b.HasOne("Capability.Entities.Chapter", "Chapter")
                        .WithMany("ChapterRoles")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_chapter_roles_chapters_chapter_id");

                    b.HasOne("Capability.Entities.ChapterRoleType", "ChapterRoleType")
                        .WithMany("ChapterRoles")
                        .HasForeignKey("ChapterRoleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_chapter_roles_chapter_role_types_chapter_role_type_id");

                    b.Navigation("Chapter");

                    b.Navigation("ChapterRoleType");
                });

            modelBuilder.Entity("Capability.Entities.PracticeRole", b =>
                {
                    b.HasOne("Capability.Entities.Practice", "Practice")
                        .WithMany("PracticeRoles")
                        .HasForeignKey("PracticeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_practice_roles_practices_practice_id");

                    b.HasOne("Capability.Entities.PracticeRoleType", "PracticeRoleType")
                        .WithMany("PracticeRoles")
                        .HasForeignKey("PracticeRoleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_practice_roles_practice_role_types_practice_role_type_id");

                    b.Navigation("Practice");

                    b.Navigation("PracticeRoleType");
                });

            modelBuilder.Entity("Capability.Entities.Chapter", b =>
                {
                    b.Navigation("ChapterRoles");
                });

            modelBuilder.Entity("Capability.Entities.ChapterRoleType", b =>
                {
                    b.Navigation("ChapterRoles");
                });

            modelBuilder.Entity("Capability.Entities.Practice", b =>
                {
                    b.Navigation("Chapters");

                    b.Navigation("PracticeRoles");
                });

            modelBuilder.Entity("Capability.Entities.PracticeRoleType", b =>
                {
                    b.Navigation("PracticeRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
